import {
  ChildFormState,
  DEFAULT_COMPONENTS,
  EXTRA_COMPONENTS,
  EasyPage,
} from '@easy-page/antd-ui'
import { ${{name-lowercase}}PageInfo } from './pageInfo'
import {
  ActFullInfo,
  ActSubTabResources,
  ActTypeEnum,
  BizLineEnum,
  CUSTOM_COMPONENTS,
  ChargeSideEnum,
  FactorInfo,
  PlanAndActTabResources,
  SubmitType,
  anchorPointToWrongPosition,
  getActivityId,
  needOtherOrgPnAudit,
  prepareDataForEdit,
  saveAct,
  toPlanAndActList,
} from '@/common'
import { actDetailModel, factorModel } from '@/common/models'
import { mccModel } from '@/common/models'
import { pnListModel } from '@/common/models'
import { observer } from 'mobx-react'
import { BaseActContainer } from '@/common'
import { ${{actType-allUppercase}}_FACTOR_CODES } from './lib/constant'
import { ${{name-uppercase}}ActFormState, ${{name-uppercase}}ActFormProps } from './interface'
import { submitActConfirm } from '../../components'
import {
  ${{previewComponent}}
} from '../../components/PreviewInfo/fields'
import { message } from 'antd'
import { confirmRisk, getSuccessTips } from '../../components/ConfirmRisk'
import { get${{actPrefix}}ActDefaultValues } from './lib/getDefaultValues'
import { get${{actPrefix}}EditableConfig } from './lib/getEditableConfig'
import { runChooseOperationEffects } from '../../effects'
import { needOtherOrgModel } from '@/common/models/needOtherOrgPnAudit'
import { subsidyAuthModel } from '@/common/models/subsidyAuth'
import { useMemo } from 'react'
import { getActConfig } from '@/common/configs'
import { configListModel } from '@/common/models/configList'

export const ${{name-uppercase}}Form = observer(() => {
  const {
    data: { amount_limit_4_subactivity },
  } = mccModel.getData()
  const { data: factors } = factorModel.getData()
  const { data: pnList } = pnListModel.getList()
  const { data: actDetail = {} as ActFullInfo } = actDetailModel.getData()
  const { data: resourceIdRes = [] } = subsidyAuthModel.getList()
   const { data: configs = [] } = configListModel.getList()

  const actConfig = getActConfig({
    actType:  ${{actType-enum}},
    configs,
  })

  const {
    data: {
      invite_poi_brand_excel_template_url,
      invite_poi_excel_template_url,
    },
  } = mccModel.getData()
  return (
    <BaseActContainer
      className="relative"
      bgBuList={[ChargeSideEnum.MeiTuanShanGou]}
      factorCodes={actConfig?.actFactorInfo?.factorCodes || []}
      resourceIdList={actConfig.resourceIdList}
      key={'${{name-lowercase}}'}
    >
      <EasyPage<${{name-uppercase}}ActFormState, ${{name-uppercase}}ActFormProps>
        commonUIConfig={{
          form: {
            labelCol: { span: 4 },
            wrapperCol: { span: 16 },
            className: 'pb-[64px]',
          },
          formItem: {
            colon: false,
          },
        }}
        defaultValues={get${{actPrefix}}ActDefaultValues({
          actDetail: actDetail as ActFullInfo,
        })}
        pageId="${{actType}}"
        context={{
          poiInviteTemplateUrl: invite_poi_excel_template_url,
          brandInviteTemplateUrl: invite_poi_brand_excel_template_url,
          onCancel() {
            toPlanAndActList(
              {
                tab: PlanAndActTabResources.Act,
                actFilterType: ActSubTabResources.Mine,
                bizLine: `${${{bizLineEnum}}}`,
              },
              '_self'
            )
          },
          async onSubmit({ ...data }, { formUtil, submitType }) {
            ${{pnAudit}}

            return submitActConfirm({
              fields: [
                ${{previewComponent}}
              ],
              data: data as any,
              async onConfirm() {
                const submitData = prepareDataForEdit(data as ActFullInfo, {
                  detailInfo: actDetail,
                  clearApplyControl: false,
                })

                console.log('submitData', submitData)

                const res = await saveAct({
                  ...submitData,
                  actType: ${{actType-enum}}
                })
                if (res.success) {
                  confirmRisk({
                    saveActRes: res.data,
                    onConfirm: () => {
                      message.success(getSuccessTips())
                      setTimeout(() => {
                        if (submitType === SubmitType.Default) {
                          toPlanAndActList(
                            {
                              tab: PlanAndActTabResources.Act,
                              actFilterType: ActSubTabResources.Mine,
                              bizLine: `${${{bizLineEnum}}}`,
                            },
                            '_self'
                          )
                        } else {
                          window.location.reload()
                        }
                      }, 1000)
                    },
                    onCancel: () => {},
                  })
                } else {
                  message.error(res.msg || '提交失败，请稍后重试')
                }
              },
            })
          },
          mccSubActMaxCount: amount_limit_4_subactivity,
          factors: { ...(factors || {}) } as FactorInfo,
          resourceIdRes,
          pnListData: pnList || [],
          editable: get${{actPrefix}}EditableConfig(actDetail as ActFullInfo),
        }}
        effects={[
          {
            changedKeys: ['chooseOperation'],
            action: runChooseOperationEffects,
          },
          {
            changedKeys: ['promotionTime.timeRange'],
            action: ({ formUtil }) => {
              const endTime = formUtil.getFieldValue('endTime')
              if (endTime) {
                formUtil.validate(['endTime'])
              }
            },
          },
        ]}
        key={'${{name-lowercase}}'}
        components={{
          ...DEFAULT_COMPONENTS,
          ...EXTRA_COMPONENTS,
          ...CUSTOM_COMPONENTS,
        }}
        pageType="form"
        {...${{name-lowercase}}PageInfo}
      />
    </BaseActContainer>
  )
})

export * from './interface'
